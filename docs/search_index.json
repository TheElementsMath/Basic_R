[["index.html", "Basic Statistical Computing and Data Science Using R ", " Basic Statistical Computing and Data Science Using R R is a programming language and open-source software environment used for statistical computing, data analysis, and visualization. It was created by Ross Ihaka and Robert Gentleman at the University of Auckland, in the mid-1990s. R is widely used in both academia and industry for a variety of data analysis tasks, from simple data cleaning and exploration to advanced statistical modeling and machine learning. The main strengths of R is its flexibility and ease of use. R has a rich set of built-in functions and packages, but users can also write their own functions and packages, making it possible to customize and extend the language to suit their needs. R has a large and active community of users and developers, who contribute new packages and functionality to the language on a regular basis. This means that R is constantly evolving, and new tools and techniques are being added all the time. It also means that if you are having trouble with R, finding the answer is often only a Google search away. R is particularly well-suited for statistical analysis and data visualization. It has a wide range of built-in statistical functions for data analysis, including basic descriptive statistics, hypothesis testing, regression analysis, and time series analysis. R also has powerful data visualization tools, with a variety of built-in plotting functions and packages for creating charts, graphs, and interactive visualizations. These visualization tools allow users to explore data and communicate their findings in a clear and effective way. Another key feature of R is its ability to handle large datasets. R can easily handle datasets with millions of observations and hundreds of variables, making it a popular choice for big data analysis. R also has tools for working with messy or incomplete data, including functions for data cleaning, imputation, and transformation. This book is a compilation of videos that will help you learn R. We will walk you through everything from installing R and RStudio to installing packages to basic statistics and some deeper data science algorithms. We will spend time discussing how to use R for statistical calculations and what the output that R generates means. Hopefully, when you are finished with this book, you will have a deeper understanding of statistics and data science and how these techniques can be applied to real life. "],["basic-installation.html", "Chapter 1 Basic Installation 1.1 R and RStudio 1.2 LateX 1.3 Orientation 1.4 Libraries in R 1.5 Markdown", " Chapter 1 Basic Installation 1.1 R and RStudio R has become a popular tool for machine learning and artificial intelligence applications. It has a wide range of packages for machine learning, including tools for clustering, classification, and regression analysis. R is also used for deep learning and neural network analysis. RStudio is an integrated development environment (IDE) for R, designed to make it easier to write and run R code. It was created by the RStudio team, led by JJ Allaire, and first released in 2011. RStudio has become a popular tool for R users, particularly those who are new to the language. One of the key features of RStudio is its user-friendly interface. The IDE has a clean and intuitive layout, with multiple panes that allow users to view and edit their code, interact with the console, and view plots and other output. RStudio also has a variety of built-in tools and features that make it easier to write and debug R code, including syntax highlighting, code completion, and integrated debugging tools. RStudio also has a variety of tools for working with projects and packages. Users can create and manage projects, which are collections of R code, data, and other files that are organized in a single directory. RStudio also has a package manager, which allows users to install and manage R packages, and create their own packages. Together, R and RStudio form a powerful toolset for data analysis and statistical modeling. Let’s begin by getting R and RStudio downloaded. How to download R and RStudio 1.2 LateX LaTeX is a document preparation system that allows users to typeset and format high-quality documents, particularly those with mathematical equations, formulas, and symbols. RStudio integrates with LaTeX by allowing users to create and compile LaTeX documents directly from within the RStudio environment. This means that users can seamlessly integrate their R code and output into their LaTeX documents, making it easy to create reproducible research reports, manuscripts, and presentations. How to download LaTeX 1.3 Orientation In this tutorial, we will learn how to open an RScript. We will learn about the numeric data type in RStudio and how to perform operations using the numeric data type; such as addition, subtraction, multiplication, division, square roots, exponentiation, and logarithms. R Orientation Part 1 In this tutorial, we will learn about the integer data type in RStudio. We will learn how to perform operations with the integer data type and the logical data type. We will also learn about the character data type. R Orientation Part 2 1.4 Libraries in R In R, a library is a collection of pre-written R functions that extend the functionality of the base R system. Libraries can be loaded into R to provide additional capabilities for data manipulation, visualization, statistical analysis, and more. There are many libraries available in R, and they can be installed from the Comprehensive R Archive Network (CRAN), GitHub, or other sources. To use a library in R, it must first be installed and then loaded into the R session using the library() function. Once a library is loaded, its functions and other objects become available for use in the R session. Libraries in R can be incredibly useful for performing specific tasks that may not be included in the base R system. They can also save time and effort by providing pre-written code for common operations, allowing users to focus on their specific analysis or research questions rather than writing code from scratch. Finally, because R is an open-source language, users can contribute their own libraries and share them with the wider R community. This tutorial will give you a brief introduction to libraries in R. R Libraries 1.5 Markdown R Markdown is a markup language that enables the creation of dynamic and reproducible documents, reports, and presentations that integrate text, code, and data. R Markdown is based on the Markdown syntax and is designed to facilitate the creation of documents that combine R code, data analysis, and narrative text. With R Markdown, users can create documents in a variety of formats, including HTML, PDF, Word, and PowerPoint, among others. R Markdown documents are highly customizable, allowing users to control the appearance of their documents using a combination of Markdown syntax and customizable options. R Markdown also provides tools for including tables, figures, and interactive visualizations in documents. R Markdown is fully integrated with RStudio, making it easy to create, preview, and publish R Markdown documents from within the RStudio environment. This integration streamlines the workflow for creating and sharing reproducible research reports, making R Markdown a valuable tool for researchers, data scientists, and other professionals who need to communicate their findings in a clear and reproducible way. R Markdown "],["vectors-matrices-other-grouped-data.html", "Chapter 2 Vectors, Matrices &amp; Other Grouped Data 2.1 Vectors 2.2 Matrices 2.3 Lists 2.4 Data Frames 2.5 Data From External Sources", " Chapter 2 Vectors, Matrices &amp; Other Grouped Data Before we begin to manipulate data in R, it is important to see how data is dealt with. Most data will come from an external file. Once we read in that data, it is important to know how it is stored in R and how to change that data. Ultimately, we want to be able to import data, clean it, explore it and then do some data analytics on it. Knowing how data is handled in R will help us later when we attempt to use some of the built in functionality of R. While this section might not be the most exciting, it might be the most important. 2.1 Vectors In R, a vector is an ordered collection of elements of the same data type. Vectors can be created using the c() function or by using a sequence operator such as :. There are several types of vectors in R, including logical, integer, numeric, complex, and character vectors. Each type of vector has its own set of operations that can be performed on it. For example, arithmetic operations such as addition and multiplication are only allowed on numeric and complex vectors. One of the most useful features of vectors in R is their ability to be indexed. Elements of a vector can be accessed using square brackets [] and the index of the element. Indexing starts at 1 in R, so the first element of a vector can be accessed using [1]. Vectorization is another powerful feature of R vectors. It allows operations to be performed on entire vectors at once, rather than having to loop through each element of the vector. This can lead to much faster and more efficient code. R also has several built-in functions for working with vectors, such as length(), which returns the number of elements in a vector, and sum(), which returns the sum of all the elements in a numeric vector. Overall, vectors are a fundamental data type in R and are essential for many data analysis tasks. Understanding how to create, manipulate, and access elements of vectors is an important skill for any R programmer. VIDEO - Create a vector, do some vector operations like + (talk about recycling rule). Combine vectors using c() perhaps discuss coercion. VIDEO - Talk about vector index (+ and -). Create new vectors from vector index, duplicate indexes, use : to range through index, Talk about logical vectors. Name vector members. Some vector functions that might be useful for you to explore include: length(): returns the number of elements in a vector. sum(): returns the sum of all the elements in a numeric vector. mean(): returns the arithmetic mean of all the elements in a numeric vector. min(): returns the minimum value in a vector. max(): returns the maximum value in a vector. sort(): sorts the elements in a vector in ascending or descending order. unique(): returns a vector with only the unique elements from a given vector. rev(): reverses the order of the elements in a vector. rep(): replicates a vector a given number of times. paste(): concatenates two or more character vectors. substr(): extracts a substring from a character vector. toupper() and tolower(): convert all the letters in a character vector to uppercase or lowercase, respectively. cumsum(): returns the cumulative sum of the elements in a numeric vector. diff(): returns the differences between consecutive elements in a numeric vector. which(): returns the indices of the elements in a vector that meet a certain condition. 2.2 Matrices In R, a matrix is a two-dimensional array of elements of the same data type, organized into rows and columns. Matrices can be created using the matrix() function, which takes in a vector of elements and the number of rows and columns to arrange them in. Matrices in R can be indexed using row and column numbers, similar to how elements of vectors are accessed using index values. Indexing starts at 1 in R, so the element in the first row and first column of a matrix can be accessed using [1,1]. R also has several built-in functions for working with matrices. For example, dim() returns the dimensions of a matrix, rowSums() returns the sum of the elements in each row of a matrix, and colMeans() returns the mean of the elements in each column of a matrix. One important feature of matrices in R is that they can be used to perform matrix operations such as multiplication, addition, and inversion. These operations are especially useful in linear algebra and statistical analysis. Another useful feature of matrices in R is that they can be converted to other types of objects, such as data frames, which are commonly used for data analysis. Matrices are a powerful tool in R for organizing and manipulating data in a two-dimensional format. Understanding how to create, index, and perform operations on matrices is vital to be proficient in R. VIDEO - Construct a matrix using “matrix( C(), nrow = )”. Extract specific values, rows, columns, name rows/ columns. cbind, rbind. VIDEO - Matrix Arithmetic, Transpose matrix, determinant Some of the many functions that are useful to know when dealing with matrices include: matrix(): creates a matrix from a vector of elements and the number of rows and columns. dim(): returns the dimensions of a matrix. t(): returns the transpose of a matrix. diag(): creates a diagonal matrix from a vector of elements. det(): returns the determinant of a matrix. solve(): solves a system of linear equations. %*%: performs matrix multiplication. crossprod(): returns the cross-product of two matrices. eigen(): returns the eigenvalues and eigenvectors of a matrix. rowSums(): returns the sum of the elements in each row of a matrix. colMeans(): returns the mean of the elements in each column of a matrix. apply(): applies a function to either rows or columns of a matrix. cbind(): combines matrices by column. rbind(): combines matrices by row. qr(): computes the QR decomposition of a matrix. 2.3 Lists In R, a list is a data structure that allows you to store multiple elements of different types. Lists can contain any R object, including other lists, vectors, matrices, data frames, and even functions. To create a list in R, you use the list() function, which takes any number of arguments separated by commas and returns a new list. Lists in R are indexed using double square brackets ([[ ]]) or single square brackets ([ ]) with a numeric or character index. The double square brackets extract the element itself, while the single square brackets return a new list containing only the specified elements. Lists are widely used in R for a variety of tasks, such as storing and manipulating complex data structures, passing arguments to functions, and creating nested data structures. With their flexibility and versatility, lists are an essential data structure in R programming. VIDEO - Create a list, use [] and [[]] to extract items from a list. Name members of a list, Some of the essential functions for lists include: list() - This function creates a new list object and initializes it with specified elements. unlist() - This function is used to simplify a list object by flattening it into a vector. length() - This function returns the number of elements in a list. names() - This function retrieves or sets the names of the elements in a list. [[ ]] - This operator is used to extract a single element from a list by its index or name. \\([ ]\\) - This operator is used to extract a subset of a list by its index or name. append() - This function is used to add new elements to the end of a list. rev() - This function reverses the order of the elements in a list. sort() - This function sorts the elements in a list in ascending or descending order. split() - This function is used to split a list into smaller sub-lists based on a specified criterion. lapply() - This function applies a specified function to each element in a list and returns a new list containing the results. sapply() - This function applies a specified function to each element in a list and returns a simplified result, such as a vector or matrix. 2.4 Data Frames A data frame is a two-dimensional tabular data structure that consists of rows and columns, similar to a spreadsheet. Importantly, each column in a data frame can have a different data type, making this structure very flexible. This flexibility is why data frames are one of the most commonly used data structures for data analysis and manipulation. Creating a data frame in R is straightforward. You can create a data frame from existing vectors, lists, or matrices using the data.frame() function. Each vector or list will be used as a column in the data frame, and the length of each column should be the same. Once you have a data frame, you can perform various operations on it, such as selecting rows and columns, filtering data based on certain conditions, sorting data, merging data frames, and more. R provides a wide range of functions for these operations, including the subset(), select(), filter(), arrange(), and merge() functions. Data frames also play a crucial role in data visualization in R. The flexibility of the data frame structure allows users to create plots with a high degree of customization ultimately resulting in publication-quality visualizations. VIDEO - Creating DFs, nrow, head, column slices, row slices, (Ignore dplyr) Some common functions for data frames include: head() and tail(): These functions allow you to view the first or last few rows of a data frame, respectively. summary(): This function provides a summary of the variables in a data frame, including measures of central tendency, dispersion, and the number of missing values. str(): This function provides information about the structure of a data frame, including the variable types and the number of observations. subset(): This function allows you to extract a subset of rows or columns from a data frame based on a specific condition. merge(): This function allows you to merge two or more data frames into a single data frame based on a common variable. transform() and mutate(): These functions allow you to create new variables in a data frame based on existing variables or perform mathematical operations on existing variables. aggregate(): This function allows you to compute summary statistics for subsets of data based on one or more grouping variables. reshape(): This function allows you to reshape a data frame from a wide format to a long format or vice versa. dplyr package: This package provides a set of functions that allow for easy data manipulation, including select(), filter(), arrange(), group_by(), and summarise(). 2.5 Data From External Sources R provides several functions to read data from different file formats and data sources. Here are some of the most commonly used ways to read data into R: read.csv() or read.table() - These functions are used to read data from text files in CSV or tab-separated values (TSV) format. read.xlsx() - This function is used to read data from Microsoft Excel spreadsheets. read_sql() or DBI::dbGetQuery() - These functions are used to read data from SQL databases. readr::read_csv() - This function is an alternative to read.csv() and provides faster reading of CSV files. haven::read_sas(), read_spss(), or read_dta() - These functions are used to read data from SAS, SPSS, or Stata data files, respectively. jsonlite::fromJSON() - This function is used to read data from JSON files. httr::GET() or RCurl::getURL() - These functions are used to read data from web APIs or websites. readLines() - This function is used to read data from text files line by line. scan() - This function is used to read data from text files that do not have a fixed format. readClipboard() - This function is used to read data from the system clipboard. These functions provide a wide range of options for reading data into R, making it easy to import data from different file formats and data sources. Additionally, R also has several packages that provide specialized functions for reading data, such as readxl for reading Excel files or rvest for scraping data from websites. VIDEO - Read in data from some different sources. "],["learning-about-the-data.html", "Chapter 3 Learning About the Data 3.1 Qualitative Data Visualization 3.2 Quantatiative Data Visualization 3.3 Descriptive Statistics", " Chapter 3 Learning About the Data By the end of this book, we want to be able to perform an exploratory data analysis. In order to do so, we need to be able to discuss meaningful properties of our data. In this chapter, we will discuss some visualization techniques for qualitative and quantitative data, some measures of central tendency and some measures of spread. While putting these ideas together does not alone constitute an exploratory data analysis, we will take ideas learned from this chapter and use them extensively when we perform exploratory data analysis. 3.1 Qualitative Data Visualization Qualitative data visualization is the process of representing non-numerical or categorical data in a visual form. Qualitative data refers to data that is non-numeric. Visualizing qualitative data can help analysts identify patterns, trends, and relationships that may not be immediately apparent from the data alone. There are many types of qualitative data visualization techniques. Here, we focus on some of the basic types: Frequency distributions, Relative frequency distributions, Bar charts and Pie charts. Qualitative data visualization is an important tool for analyzing and understanding complex, non-numerical data. It can help analysts gain new insights and identify patterns and relationships that may not be immediately apparent from the data alone. However, it is important to approach qualitative data visualization with a critical eye and to be mindful of the subjectivity involved in interpreting the data. VIDEO - Frequency, relative frequency distributions. VIDEO - Bar charts &amp; Pie charts 3.2 Quantatiative Data Visualization Quantitative data visualization is the process of representing numerical data in a visual form. It is a powerful tool for communicating complex data in an intuitive and meaningful way. By using charts, graphs, and other visual aids, quantitative data visualization enables analysts to identify patterns, trends, and relationships in the data. There are many types of quantitative data visualization techniques, each suited to different types of data and research questions. Bar charts, column charts and histograms are commonly used to show the distribution of data. Scatter plots and line graphs are used to show the relationship between two or more variables. Box plots are used to show the distribution of data across different quartiles or percentiles. One important consideration when visualizing quantitative data is to choose the right type of visualization for the data and the research question. Different types of visualizations can emphasize different aspects of the data and may be more or less effective depending on the context. It is also important to ensure that the visualization accurately represents the data, without distorting or misleading the viewer. VIDEO - Frequency, relative frequency, cumulative frequency distributions. VIDEO - Frequency histograms, cumulative frequency plots, Scatter plots. 3.3 Descriptive Statistics 3.3.1 Measures of Central Tendency Measures of central tendency are statistical measures that describe the center or typical value of a dataset. They help summarize the data by providing a single value that represents the dataset as a whole. The three most common measures of central tendency are: Mean: This is the sum of all the values in a dataset divided by the number of values. It represents the average value of the dataset. Median: This is the middle value in a dataset, with half the values above and half the values below it. It represents the value that is most representative of the dataset. Mode: This is the value that occurs most frequently in a dataset. It represents the most common value in the dataset. The strengths and weaknesses of each will be discussed in the video below. VIDEO - Mean, median and mode 3.3.2 Measures of Spread Measures of spread are statistical measures that describe how spread out or dispersed a dataset is. They help summarize the data by providing information on the variability or diversity of the dataset. The three most common measures of spread are: Range: This is the difference between the highest and lowest values in a dataset. It represents the extent of the spread of the data. Variance: This is the average of the squared differences between each value in a dataset and the mean. It represents how far the data points are from the mean. Standard deviation: This is the square root of the variance. It represents the typical distance between each data point and the mean. In general, measures of spread help us understand how similar or dissimilar the data points are from each other, and provide useful information for making inferences about the population from which the data was sampled. VIDEO - Quartile, percentile, range IQR and Boxplot VIDEO - SD, variance, skewness VIDEO - Covariance and Correlation Coefficient "],["probability-distributions.html", "Chapter 4 Probability Distributions", " Chapter 4 Probability Distributions "],["hypothesis-testing.html", "Chapter 5 Hypothesis Testing", " Chapter 5 Hypothesis Testing "],["missing-data.html", "Chapter 6 Missing Data 6.1 Dealing with Missing Data 6.2 Types of Missing Data", " Chapter 6 Missing Data Dealing with missing data is a common problem in data analysis, as it can significantly impact the accuracy of results and the validity of conclusions drawn from the data. Missing data can occur for a variety of reasons, such as errors in data collection, survey non-response, data entry, or data processing. It is therefore important for data analysts to have a good understanding of how to handle missing data to ensure that their results are reliable and accurate. 6.1 Dealing with Missing Data Complete Case Analysis (CCA) Complete case analysis (CCA) is one of the simplest and most common methods used to handle missing data. CCA involves analyzing only the cases (rows) that have complete data for all variables (columns) of interest, discarding any cases that have missing data. This method can be effective when the amount of missing data is small, and when the missing data is not systematically related to the variables of interest. However, it can result in biased results if the missing data is systematically related to the variables being analyzed. Pairwise Deletion Pairwise deletion involves analyzing each variable separately, using only the cases that have complete data for that variable. This method can be effective when the amount of missing data is small and when the missing data is not systematically related to the variables of interest. However, like CCA, it can result in biased results if the missing data is systematically related to the variables being analyzed. Imputation Imputation involves filling in missing data with estimated values. There are several methods of imputation, including mean imputation, regression imputation, and multiple imputation. Mean imputation involves replacing missing values with the mean of the available values for that variable. Regression imputation involves using regression analysis to estimate missing values based on the relationship between the variable of interest and other variables in the dataset. Multiple imputation involves creating multiple imputed datasets and analyzing each dataset separately to generate an overall estimate. Imputation can be an effective method of handling missing data when the amount of missing data is moderate and when the missing data is not systematically related to the variables being analyzed. However, it can result in biased results if the missing data is systematically related to the variables being analyzed. Sensitivity Analysis Sensitivity analysis involves examining the impact of different assumptions about the missing data on the results of the analysis. This method can help to identify the extent to which the results are affected by the missing data and to assess the robustness of the results. It can also help to identify potential biases or confounding factors that may be affecting the results. Model-based Methods Model-based methods involve using statistical models to estimate the missing data (for example, linear regression). These methods can be effective when the amount of missing data is large and when the missing data is systematically related to the variables being analyzed. However, they can be complex and may require advanced statistical knowledge and expertise. Hot Deck/ Cold Deck Imputation Hot deck imputation involves using data from similar cases to impute missing values. Cold deck imputation involves using data from a previous study or dataset to impute missing values. It is important for data analysts to carefully consider the advantages and disadvantages of each method and to use appropriate techniques to ensure that their results are reliable and accurate. 6.2 Types of Missing Data Before deciding on a method to deal with missing data, it is important to understand why the data is missing. There are three types of missing data patterns: missing completely at random (MCAR), missing at random (MAR), and missing not at random (MNAR). Missing Completely at Random (MCAR) MCAR occurs when the probability of a data point being missing is unrelated to the value of the variable or any other variables in the dataset. This means that the missing data is completely random, and there is no pattern to the missing values. MCAR is the most ideal type of missing data, as it does not introduce any bias into the analysis. In this case, the analysis can simply be performed on the subset of the data with complete observations, without any adjustments. For example, in a study of height and weight, if some participants did not report their weight because they forgot or did not want to, and there is no relationship between the missing data and any other variables in the dataset, then the missing data is MCAR. Missing at Random (MAR) MAR occurs when the probability of a data point being missing is related to the value of another variable in the dataset. This means that the missing data is not completely random, but is related to other variables in the dataset. In other words, the probability of missing data is dependent on the observed data, but not on the missing data itself. This means that the missing data is not informative on its own, but can be predicted based on other variables in the dataset. MAR is a common type of missing data in survey research, where individuals may choose not to respond to certain questions based on their answers to previous questions. For example, in a study of income and education, if individuals with lower income are more likely to not respond to a survey question about income, then the missing data is MAR. Missing Not at Random (MNAR) MNAR occurs when the probability of a data point being missing is related to the value of the missing variable itself. This means that the missing data is not random, and cannot be predicted based on other variables in the dataset. MNAR is the most problematic type of missing data, as it can introduce bias into the analysis. This is because the missing data is related to the variable being analyzed, and may affect the conclusions drawn from the analysis. For example, in a study of mental health and job satisfaction, if individuals with higher anxiety levels are less likely to respond to a survey question about anxiety, then the missing data is MNAR. Dealing with MNAR data is challenging because it requires knowledge of the missing data mechanism, which may not be possible to determine. In general, it is important to be cautious when analyzing MNAR data and to use sensitivity analyses to assess the robustness of the results. EXAMPLE: Classify the following as MAR, MCAR or MNAR: In a survey of voting behavior, some respondents accidentally left a question blank due to a technical error in the survey software. In a survey of health behaviors, individuals who smoke may be more likely to skip questions about smoking-related behaviors. In a survey of addiction, individuals who are struggling with substance abuse may be less likely to report the extent of their substance use. In a study of income and debt, individuals who are struggling with debt may be less likely to report their income accurately. In a study of exercise and depression, participants with higher levels of depression may be more likely to skip questions about their exercise habits. In a clinical trial, some patients did not complete the study due to unrelated personal reasons, such as moving out of town. In a study of political beliefs, individuals who are more liberal may be more likely to skip questions about their income. In a study of weather patterns, some weather stations experienced temporary power outages, causing some data to be missing. In a study of mental health and medication usage, individuals who are not compliant with their medication regimen may be less likely to report their medication use accurately. In a study of political beliefs and race, individuals who hold extreme political beliefs may be less likely to report their race accurately. In a study of income and age, some participants forgot to report their income in the survey. In a survey of shopping habits, individuals with lower income may be more likely to skip questions about their spending habits. In a study of social media usage, some participants did not complete a survey due to a personal emergency. In a study of health behaviors and sexual orientation, individuals who belong to marginalized sexual orientation groups may be less likely to report certain health behaviors accurately. In a study of dietary habits, individuals with higher body mass index may be more likely to skip questions about their food intake. VIDEO - Solutions to the problems. Example: Classify the missing data and suggest an imputation technique for each case: In a study of height and weight, some participants did not report their weight, but the missing data is unrelated to any other variable in the dataset. In a study of income and education, some individuals with lower income were less likely to respond to a survey question about income. In a study of health outcomes and medication usage, some medication usage responses are missing for some participants and may be related to multiple other variables such as age, health status, and income. In a study of housing prices and demographics, housing prices are missing for some participants in a certain neighborhood. In a longitudinal study of health outcomes and medication usage, medication usage is missing for some participants in a follow-up survey. In a study of blood pressure and medication usage, medication usage is missing for some participants in a follow-up survey. VIDEO - Solutions to the problems. "],["data-dictionaries.html", "Chapter 7 Data Dictionaries 7.1 Purpose of a Data Dictionary 7.2 Components of a Data Dictionary 7.3 Benefits of Using a Data Dictionary 7.4 Examples", " Chapter 7 Data Dictionaries A data dictionary is a document that provides a comprehensive description of the data, stored in a document, database or information system. It is essentially a map or guide that allows users to understand the structure, contents, and relationships of the data stored in a database. Data dictionaries play a critical role in data management, as they provide a standardized way of defining, documenting, and sharing information about the data in a system. At its core, a data dictionary is a collection of metadata, or data about data. This metadata typically includes information such as field names, data types, data formats, descriptions, and relationships between data elements. Data dictionaries can be created and maintained manually, or they can be automatically generated by software tools that analyze the data and extract relevant information. 7.1 Purpose of a Data Dictionary The primary purpose of a data dictionary is to ensure that everyone who interacts with the database is using the same definitions and interpretations of the data. This helps to eliminate confusion and misinterpretation, which can lead to errors and inefficiencies in data processing. By providing a standardized definition of each data element, the data dictionary can help to ensure that all users understand the data in the same way, regardless of their background or expertise. This can be especially important in large organizations or complex systems, where different teams or individuals may be working with the same data but using different terminology or assumptions. Another important purpose of a data dictionary is to provide a framework for data governance. Data governance refers to the processes, policies, and standards that are used to manage and protect data assets within an organization. A data dictionary can be used to document these processes and standards, ensuring that everyone within the organization is aware of them and that they are being followed consistently. Data dictionaries can also help improve data quality by providing a centralized repository for data validation rules and data constraints. This allows data quality checks to be performed more efficiently and consistently, and helps ensure that data is properly validated and conforms to established standards and guidelines. In addition to providing benefits for data management and quality, data dictionaries can also help improve collaboration and communication among stakeholders. By providing a standardized way of describing data, data dictionaries can help ensure that everyone involved in a project or system is speaking the same language and has a common understanding of the data. This can help prevent misunderstandings and facilitate effective communication and collaboration. Once the data dictionary has been created, it is important to ensure that it is maintained and kept up-to-date. This may involve updating the dictionary whenever changes are made to the data schema or system, as well as periodically reviewing and revising the dictionary to ensure that it remains accurate and relevant. 7.2 Components of a Data Dictionary A data dictionary typically includes several key components, including the following: Data Elements: This section provides a list of all the variables (data elements) in both long and short form, along with a description of each variable and its data type. Data Relationships: This section documents the relationships between different data elements, such as calculations used to create variables or rules linking variables with different names across tables. Often included here is the type of relationship between the variables (ie, 1-1, 1-many, many-1, or many-many). Data Sources: This section identifies the sources of data that are used within the system, such as databases, spreadsheets, or other applications. Data Constraints: This section documents any constraints or rules that apply to the data, such as maximum and minimum values, data formats, or data validation rules. Data Security: This section documents the security measures that are in place to protect the data, such as encryption, access controls, and auditing. 7.3 Benefits of Using a Data Dictionary There are several benefits to using a data dictionary within an organization, including the following: Improved Data Quality: By documenting the attributes and constraints of the data, a data dictionary can help to ensure that the data is accurate, consistent, and free from errors. Enhanced Data Integration: A data dictionary can help to facilitate the integration of data from multiple sources, by providing a common reference point for all the data elements and their relationships. Increased Efficiency: By providing a single, centralized repository for all the information about the data, a data dictionary can help to streamline the development and maintenance of applications and systems. Improved Data Governance: A data dictionary can help to ensure that data is managed and protected in a consistent and standardized manner, in line with the organization’s data governance policies and standards. It can also demonstrate compliance with data protection regulations and other legal requirements. Improved Communication: A data dictionary can help to facilitate communication between different stakeholders within an organization, by providing a common language and reference point for discussing the data. 7.4 Examples "],["dplyr.html", "Chapter 8 dplyr", " Chapter 8 dplyr dplyr is a widely-used R package for data manipulation and transformation. A part of the tidyverse, created by Hadley Wickham, the dplyr package provides a fast and intuitive grammar for data manipulation, making it easier for users to manipulate and analyze data with less code. dplyr is built around five main functions: filter(): This command is used to select a subset of rows from a data frame based on some condition or set of conditions. For example, if you had a data frame called df and wanted to select only rows where the age variable was greater than or equal to 18, you could use the following code: filter(df, age &gt;= 18). select(): This command is used to select a subset of columns from a data frame. For example, if you had a data frame called df with columns called age, gender, and income, and you only wanted to keep the age and income columns, you could use the following code: select(df, age, income). mutate(): This command is used to create new variables (i.e., columns) in a data frame based on some computation or transformation of existing variables. For example, if you had a data frame called df with columns called height and weight, and you wanted to create a new variable called bmi that calculated the body mass index for each observation, you could use the following code: mutate(df, bmi = weight / (height^2)). summarise(): This command is used to compute summary statistics (e.g., mean, median, standard deviation) for groups of observations based on some grouping variable(s). For example, if you had a data frame called df with columns called group (which had two levels, “A” and “B”) and value, and you wanted to compute the mean value for each group, you could use the following code: summarise(group_by(df, group), mean_value = mean(value)). arrange(): This command is used to sort the rows of a data frame based on one or more variables. For example, if you had a data frame called df with columns called name and age, and you wanted to sort the data frame by age (in ascending order), you could use the following code: arrange(df, age). These functions allow users to select, filter, arrange, and summarize data in a more efficient and intuitive manner. One of the key advantages of dplyr is its speed. dplyr is designed to work efficiently with large datasets, making use of optimized C++ code to perform operations much faster than base R. This means that users can work with larger datasets and complete their analyses more quickly. Another advantage of dplyr is its syntax. The syntax is designed to be intuitive and easy to learn. The five main functions (filter(), select(), mutate(), summarise(), and arrange()) are all easy to understand and use. dplyr also allows users to chain together multiple operations using the %&gt;% operator. This can make code more readable and easier to understand. VIDEO - dplyr pipe operator VIDEO - dplyr filter() VIDEO - dplyr select() VIDEO - dplyr mutate() VIDEO - dplyr summarise/ summarise_at() VIDEO - dplyr arrange() VIDEO - dplyr group_by() VIDEO - dplyr left_join() VIDEO - dplyr right_join() VIDEO - dplyr full_join() A longer list of dplyr commands includes: filter(): This command is used to subset rows based on a logical condition(s). select(): This command is used to subset columns of a data frame. mutate(): This command is used to create new variables by transforming or computing based on existing variables. arrange(): This command is used to sort a data frame by one or more variables. group_by(): This command is used to group data by one or more variables. summarize(): This command is used to compute summary statistics for each group in a data frame. %&gt;% (pipe operator): This command is used to chain together multiple dplyr commands. left_join(): This command is used to join two data frames by a common variable(s), keeping all rows from the first data frame and matching rows from the second data frame. right_join(): This command is used to join two data frames by a common variable(s), keeping all rows from the second data frame and matching rows from the first data frame. full_join(): This command is used to join two data frames by a common variable(s), keeping all rows from both data frames. rename(): This command is used to rename columns in a data frame. distinct(): This command is used to return unique rows of a data frame. count(): This command is used to count the number of observations by group in a data frame. case_when(): This command is used to create a new variable with conditional logic. if_else(): This command is used to create a new variable with if-else logic. between(): This command is used to subset rows based on a range of values. top_n(): This command is used to return the top n observations by a specified variable. slice(): This command is used to subset rows by row number. n(): This command is used to count the number of rows in a data frame. min(), max(), mean(), median(), sum(): These commands are used to compute basic summary statistics for a variable. first(), last(): These commands are used to return the first or last observation(s) of a variable. na_if(): This command is used to replace specific values with NA. na.omit(): This command is used to remove rows with NA values. pull(): This command is used to extract a single variable as a vector. recode(): This command is used to recode values of a variable. "],["ggplot2.html", "Chapter 9 ggplot2", " Chapter 9 ggplot2 ggplot2 is a widely used R package for creating high-quality and customizable visualizations. Developed by Hadley Wickham as part of the tidyverse, ggplot2 is based on the Grammar of Graphics, a theoretical framework for visualizing data. The package is built on top of the grid graphics system, which allows for greater control over the layout and appearance of plots. ggplot2 follows a layered approach to constructing plots, with each layer representing a different aspect of the visualization. The basic structure of a ggplot2 plot consists of a data set, aesthetics, geometries, and scales. Data set: ggplot2 plots are built on a data set, which is usually a data frame or a tibble. The data set should contain all the variables needed for the plot, including any grouping variables for faceting or color coding. Aesthetics: Aesthetics are the visual properties of a plot, such as the color, size, and shape of points, lines, and bars. In ggplot2, aesthetics are mapped to variables in the data set using the aes() function. Geometries: Geometries are the visual elements used to represent the data, such as points, lines, bars, and areas. In ggplot2, geometries are added to the plot using a geom_() function, where is the name of the geometry. Scales: Scales determine how the data is mapped to the visual properties of the plot, such as the range of the x and y axes and the color palette. In ggplot2, scales are set using scale_() functions, where is the name of the aesthetic. ggplot2 provides a wide range of geometries, aesthetics, and scales, which can be combined to create complex and informative visualizations. Some of the most commonly used geometries and aesthetics are: geom_point(): Displays data as points. geom_line(): Connects data points with a line. geom_bar(): Displays data as vertical bars. geom_histogram(): Displays data as a histogram. geom_boxplot(): Displays the distribution of data using a box-and-whisker plot. geom_smooth(): Adds a smoothed line to a scatter plot. geom_area(): Displays data as a stacked area chart. geom_tile(): Displays data as a heatmap. geom_hex(): Displays data as a hexagonal heatmap. geom_density(): Displays the density of data. geom_violin(): Displays the distribution of data using a violin plot. geom_jitter(): Adds random noise to points to prevent overlapping. geom_abline(): Adds a straight line with a specified intercept and slope. geom_hline(): Adds a horizontal line at a specified y-value. geom_text(): Adds text labels to the plot. Aesthetics include: x, y, color, fill, shape, size, alpha, linetype, group, weight. ggplot2 also provides a number of customization options, such as changing the axis labels and titles, adjusting the plot margins, and adding text annotations. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
