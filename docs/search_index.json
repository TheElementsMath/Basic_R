[["index.html", "Basic Statistical Computing and Data Science Using R ", " Basic Statistical Computing and Data Science Using R R is a programming language and open-source software environment used for statistical computing, data analysis, and visualization. It was created by Ross Ihaka and Robert Gentleman at the University of Auckland, in the mid-1990s. R is widely used in both academia and industry for a variety of data analysis tasks, from simple data cleaning and exploration to advanced statistical modeling and machine learning. The main strengths of R is its flexibility and ease of use. R has a rich set of built-in functions and packages, but users can also write their own functions and packages, making it possible to customize and extend the language to suit their needs. R has a large and active community of users and developers, who contribute new packages and functionality to the language on a regular basis. This means that R is constantly evolving, and new tools and techniques are being added all the time. It also means that if you are having trouble with R, finding the answer is often only a Google search away. R is particularly well-suited for statistical analysis and data visualization. It has a wide range of built-in statistical functions for data analysis, including basic descriptive statistics, hypothesis testing, regression analysis, and time series analysis. R also has powerful data visualization tools, with a variety of built-in plotting functions and packages for creating charts, graphs, and interactive visualizations. These visualization tools allow users to explore data and communicate their findings in a clear and effective way. Another key feature of R is its ability to handle large datasets. R can easily handle datasets with millions of observations and hundreds of variables, making it a popular choice for big data analysis. R also has tools for working with messy or incomplete data, including functions for data cleaning, imputation, and transformation. This book is a compilation of videos that will help you learn R. We will walk you through everything from installing R and RStudio to installing packages to basic statistics and some deeper data science algorithms. We will spend time discussing how to use R for statistical calculations and what the output that R generates means. Hopefully, when you are finished with this book, you will have a deeper understanding of statistics and data science and how these techniques can be applied to real life. "],["basic-installation.html", "Chapter 1 Basic Installation 1.1 R and RStudio 1.2 LateX 1.3 Orientation 1.4 Libraries in R 1.5 Markdown", " Chapter 1 Basic Installation 1.1 R and RStudio R has become a popular tool for machine learning and artificial intelligence applications. It has a wide range of packages for machine learning, including tools for clustering, classification, and regression analysis. R is also used for deep learning and neural network analysis. RStudio is an integrated development environment (IDE) for R, designed to make it easier to write and run R code. It was created by the RStudio team, led by JJ Allaire, and first released in 2011. RStudio has become a popular tool for R users, particularly those who are new to the language. One of the key features of RStudio is its user-friendly interface. The IDE has a clean and intuitive layout, with multiple panes that allow users to view and edit their code, interact with the console, and view plots and other output. RStudio also has a variety of built-in tools and features that make it easier to write and debug R code, including syntax highlighting, code completion, and integrated debugging tools. RStudio also has a variety of tools for working with projects and packages. Users can create and manage projects, which are collections of R code, data, and other files that are organized in a single directory. RStudio also has a package manager, which allows users to install and manage R packages, and create their own packages. Together, R and RStudio form a powerful toolset for data analysis and statistical modeling. Let’s begin by getting R and RStudio downloaded. How to download R and RStudio 1.2 LateX LaTeX is a document preparation system that allows users to typeset and format high-quality documents, particularly those with mathematical equations, formulas, and symbols. RStudio integrates with LaTeX by allowing users to create and compile LaTeX documents directly from within the RStudio environment. This means that users can seamlessly integrate their R code and output into their LaTeX documents, making it easy to create reproducible research reports, manuscripts, and presentations. How to download LaTeX 1.3 Orientation In this tutorial, we will learn how to open an RScript. We will learn about the numeric data type in RStudio and how to perform operations using the numeric data type; such as addition, subtraction, multiplication, division, square roots, exponentiation, and logarithms. R Orientation Part 1 In this tutorial, we will learn about the integer data type in RStudio. We will learn how to perform operations with the integer data type and the logical data type. We will also learn about the character data type. R Orientation Part 2 1.4 Libraries in R In R, a library is a collection of pre-written R functions that extend the functionality of the base R system. Libraries can be loaded into R to provide additional capabilities for data manipulation, visualization, statistical analysis, and more. There are many libraries available in R, and they can be installed from the Comprehensive R Archive Network (CRAN), GitHub, or other sources. To use a library in R, it must first be installed and then loaded into the R session using the library() function. Once a library is loaded, its functions and other objects become available for use in the R session. Libraries in R can be incredibly useful for performing specific tasks that may not be included in the base R system. They can also save time and effort by providing pre-written code for common operations, allowing users to focus on their specific analysis or research questions rather than writing code from scratch. Finally, because R is an open-source language, users can contribute their own libraries and share them with the wider R community. This tutorial will give you a brief introduction to libraries in R. R Libraries 1.5 Markdown R Markdown is a markup language that enables the creation of dynamic and reproducible documents, reports, and presentations that integrate text, code, and data. R Markdown is based on the Markdown syntax and is designed to facilitate the creation of documents that combine R code, data analysis, and narrative text. With R Markdown, users can create documents in a variety of formats, including HTML, PDF, Word, and PowerPoint, among others. R Markdown documents are highly customizable, allowing users to control the appearance of their documents using a combination of Markdown syntax and customizable options. R Markdown also provides tools for including tables, figures, and interactive visualizations in documents. R Markdown is fully integrated with RStudio, making it easy to create, preview, and publish R Markdown documents from within the RStudio environment. This integration streamlines the workflow for creating and sharing reproducible research reports, making R Markdown a valuable tool for researchers, data scientists, and other professionals who need to communicate their findings in a clear and reproducible way. R Markdown "],["vectors-matrices-other-grouped-data.html", "Chapter 2 Vectors, Matrices &amp; Other Grouped Data 2.1 Vectors 2.2 Matrices 2.3 Lists 2.4 Data Frames 2.5 Data From External Sources", " Chapter 2 Vectors, Matrices &amp; Other Grouped Data Before we begin to manipulate data in R, it is important to see how data is dealt with. Most data will come from an external file. Once we read in that data, it is important to know how it is stored in R and how to change that data. Ultimately, we want to be able to import data, clean it, explore it and then do some data analytics on it. Knowing how data is handled in R will help us later when we attempt to use some of the built in functionality of R. While this section might not be the most exciting, it might be the most important. 2.1 Vectors In R, a vector is an ordered collection of elements of the same data type. Vectors can be created using the c() function or by using a sequence operator such as :. There are several types of vectors in R, including logical, integer, numeric, complex, and character vectors. Each type of vector has its own set of operations that can be performed on it. For example, arithmetic operations such as addition and multiplication are only allowed on numeric and complex vectors. One of the most useful features of vectors in R is their ability to be indexed. Elements of a vector can be accessed using square brackets [] and the index of the element. Indexing starts at 1 in R, so the first element of a vector can be accessed using [1]. Vectorization is another powerful feature of R vectors. It allows operations to be performed on entire vectors at once, rather than having to loop through each element of the vector. This can lead to much faster and more efficient code. R also has several built-in functions for working with vectors, such as length(), which returns the number of elements in a vector, and sum(), which returns the sum of all the elements in a numeric vector. Overall, vectors are a fundamental data type in R and are essential for many data analysis tasks. Understanding how to create, manipulate, and access elements of vectors is an important skill for any R programmer. VIDEO - Create a vector, do some vector operations like + (talk about recycling rule). Combine vectors using c() perhaps discuss coercion. VIDEO - Talk about vector index (+ and -). Create new vectors from vector index, duplicate indexes, use : to range through index, Talk about logical vectors. Name vector members. Some vector functions that might be useful for you to explore include: length(): returns the number of elements in a vector. sum(): returns the sum of all the elements in a numeric vector. mean(): returns the arithmetic mean of all the elements in a numeric vector. min(): returns the minimum value in a vector. max(): returns the maximum value in a vector. sort(): sorts the elements in a vector in ascending or descending order. unique(): returns a vector with only the unique elements from a given vector. rev(): reverses the order of the elements in a vector. rep(): replicates a vector a given number of times. paste(): concatenates two or more character vectors. substr(): extracts a substring from a character vector. toupper() and tolower(): convert all the letters in a character vector to uppercase or lowercase, respectively. cumsum(): returns the cumulative sum of the elements in a numeric vector. diff(): returns the differences between consecutive elements in a numeric vector. which(): returns the indices of the elements in a vector that meet a certain condition. 2.2 Matrices In R, a matrix is a two-dimensional array of elements of the same data type, organized into rows and columns. Matrices can be created using the matrix() function, which takes in a vector of elements and the number of rows and columns to arrange them in. Matrices in R can be indexed using row and column numbers, similar to how elements of vectors are accessed using index values. Indexing starts at 1 in R, so the element in the first row and first column of a matrix can be accessed using [1,1]. R also has several built-in functions for working with matrices. For example, dim() returns the dimensions of a matrix, rowSums() returns the sum of the elements in each row of a matrix, and colMeans() returns the mean of the elements in each column of a matrix. One important feature of matrices in R is that they can be used to perform matrix operations such as multiplication, addition, and inversion. These operations are especially useful in linear algebra and statistical analysis. Another useful feature of matrices in R is that they can be converted to other types of objects, such as data frames, which are commonly used for data analysis. Matrices are a powerful tool in R for organizing and manipulating data in a two-dimensional format. Understanding how to create, index, and perform operations on matrices is vital to be proficient in R. VIDEO - Construct a matrix using “matrix( C(), nrow = )”. Extract specific values, rows, columns, name rows/ columns. cbind, rbind. VIDEO - Matrix Arithmetic, Transpose matrix, determinant Some of the many functions that are useful to know when dealing with matrices include: matrix(): creates a matrix from a vector of elements and the number of rows and columns. dim(): returns the dimensions of a matrix. t(): returns the transpose of a matrix. diag(): creates a diagonal matrix from a vector of elements. det(): returns the determinant of a matrix. solve(): solves a system of linear equations. %*%: performs matrix multiplication. crossprod(): returns the cross-product of two matrices. eigen(): returns the eigenvalues and eigenvectors of a matrix. rowSums(): returns the sum of the elements in each row of a matrix. colMeans(): returns the mean of the elements in each column of a matrix. apply(): applies a function to either rows or columns of a matrix. cbind(): combines matrices by column. rbind(): combines matrices by row. qr(): computes the QR decomposition of a matrix. 2.3 Lists In R, a list is a data structure that allows you to store multiple elements of different types. Lists can contain any R object, including other lists, vectors, matrices, data frames, and even functions. To create a list in R, you use the list() function, which takes any number of arguments separated by commas and returns a new list. Lists in R are indexed using double square brackets ([[ ]]) or single square brackets ([ ]) with a numeric or character index. The double square brackets extract the element itself, while the single square brackets return a new list containing only the specified elements. Lists are widely used in R for a variety of tasks, such as storing and manipulating complex data structures, passing arguments to functions, and creating nested data structures. With their flexibility and versatility, lists are an essential data structure in R programming. VIDEO - Create a list, use [] and [[]] to extract items from a list. Name members of a list, Some of the essential functions for lists include: list() - This function creates a new list object and initializes it with specified elements. unlist() - This function is used to simplify a list object by flattening it into a vector. length() - This function returns the number of elements in a list. names() - This function retrieves or sets the names of the elements in a list. [[ ]] - This operator is used to extract a single element from a list by its index or name. \\([ ]\\) - This operator is used to extract a subset of a list by its index or name. append() - This function is used to add new elements to the end of a list. rev() - This function reverses the order of the elements in a list. sort() - This function sorts the elements in a list in ascending or descending order. split() - This function is used to split a list into smaller sub-lists based on a specified criterion. lapply() - This function applies a specified function to each element in a list and returns a new list containing the results. sapply() - This function applies a specified function to each element in a list and returns a simplified result, such as a vector or matrix. 2.4 Data Frames A data frame is a two-dimensional tabular data structure that consists of rows and columns, similar to a spreadsheet. Importantly, each column in a data frame can have a different data type, making this structure very flexible. This flexibility is why data frames are one of the most commonly used data structures for data analysis and manipulation. Creating a data frame in R is straightforward. You can create a data frame from existing vectors, lists, or matrices using the data.frame() function. Each vector or list will be used as a column in the data frame, and the length of each column should be the same. Once you have a data frame, you can perform various operations on it, such as selecting rows and columns, filtering data based on certain conditions, sorting data, merging data frames, and more. R provides a wide range of functions for these operations, including the subset(), select(), filter(), arrange(), and merge() functions. Data frames also play a crucial role in data visualization in R. The flexibility of the data frame structure allows users to create plots with a high degree of customization ultimately resulting in publication-quality visualizations. VIDEO - Creating DFs, using subset, select, filter, arrange and merge. Some common functions for data frames include: head() and tail(): These functions allow you to view the first or last few rows of a data frame, respectively. summary(): This function provides a summary of the variables in a data frame, including measures of central tendency, dispersion, and the number of missing values. str(): This function provides information about the structure of a data frame, including the variable types and the number of observations. subset(): This function allows you to extract a subset of rows or columns from a data frame based on a specific condition. merge(): This function allows you to merge two or more data frames into a single data frame based on a common variable. transform() and mutate(): These functions allow you to create new variables in a data frame based on existing variables or perform mathematical operations on existing variables. aggregate(): This function allows you to compute summary statistics for subsets of data based on one or more grouping variables. reshape(): This function allows you to reshape a data frame from a wide format to a long format or vice versa. dplyr package: This package provides a set of functions that allow for easy data manipulation, including select(), filter(), arrange(), group_by(), and summarise(). 2.5 Data From External Sources R provides several functions to read data from different file formats and data sources. Here are some of the most commonly used ways to read data into R: read.csv() or read.table() - These functions are used to read data from text files in CSV or tab-separated values (TSV) format. read.xlsx() - This function is used to read data from Microsoft Excel spreadsheets. read_sql() or DBI::dbGetQuery() - These functions are used to read data from SQL databases. readr::read_csv() - This function is an alternative to read.csv() and provides faster reading of CSV files. haven::read_sas(), read_spss(), or read_dta() - These functions are used to read data from SAS, SPSS, or Stata data files, respectively. jsonlite::fromJSON() - This function is used to read data from JSON files. httr::GET() or RCurl::getURL() - These functions are used to read data from web APIs or websites. readLines() - This function is used to read data from text files line by line. scan() - This function is used to read data from text files that do not have a fixed format. readClipboard() - This function is used to read data from the system clipboard. These functions provide a wide range of options for reading data into R, making it easy to import data from different file formats and data sources. Additionally, R also has several packages that provide specialized functions for reading data, such as readxl for reading Excel files or rvest for scraping data from websites. VIDEO - Read in data from some different sources. "],["parts.html", "Chapter 3 Parts", " Chapter 3 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 4 Footnotes and citations 4.1 Footnotes 4.2 Citations", " Chapter 4 Footnotes and citations 4.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 4.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2023) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 5 Blocks 5.1 Equations 5.2 Theorems and proofs 5.3 Callout blocks", " Chapter 5 Blocks 5.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{5.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (5.1). 5.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 5.1. Theorem 5.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 5.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 6 Sharing your book 6.1 Publishing 6.2 404 pages 6.3 Metadata for sharing", " Chapter 6 Sharing your book 6.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 6.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 6.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
